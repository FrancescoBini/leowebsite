---
import Lightbox from "../components/Lightbox.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title} - Leonardo Possati</title>
    <style>
      :root {
        /* Reference dimensions based on 14-inch MacBook Pro */
        --reference-width: 1512px;
        --max-reference-width: 1550px;
        --scale-factor: 1;
        
        /* Base sizes that will be scaled */
        --base-padding: 2rem;
        --base-gap: 2rem;
        --base-title-size: 2.5rem;
        --base-text-size: 1.1rem;
        --base-back-size: 1rem;
        --base-content-width: 500px;
        --base-container-width: 1400px;
        
        /* Mobile reference dimensions */
        --mobile-reference-width: 375px;
        --mobile-max-width: 440px;
        --mobile-scale-factor: 1;
        
        /* Mobile base sizes */
        --mobile-padding: 1.5rem;
        --mobile-gap: 1.5rem;
        --mobile-title-size: 2rem;
        --mobile-text-size: 1rem;
        --mobile-back-size: 0.9rem;
      }
      
      body {
        margin: 0;
        padding: 0;
        font-family: "Helvetica Neue", Helvetica, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;
        background-color: rgb(250, 247, 242);
        color: black;
        height: 100vh;
        overflow: hidden;
        position: relative;
      }
      
      /* Container to maintain proportional layout */
      .wrapper {
        width: 100%;
        height: 100vh;
        max-width: var(--max-reference-width);
        margin: 0 auto;
        position: relative;
      }
      
      .container {
        display: grid;
        grid-template-columns: 0.8fr 1.2fr;
        gap: var(--base-gap);
        padding: var(--base-padding);
        max-width: var(--base-container-width);
        margin: 0;
        height: 100vh;
        box-sizing: border-box;
      }
      
      .back-button {
        position: fixed;
        top: var(--base-padding);
        left: var(--base-padding);
        text-decoration: none;
        color: black;
        font-size: var(--base-back-size);
        font-weight: 300;
        z-index: 10;
      }
      
      .content {
        padding-top: var(--base-padding);
        padding-left: 0;
        max-width: var(--base-content-width);
        height: calc(100vh - (var(--base-padding) * 2));
        position: relative;
      }
      
      .title {
        font-size: var(--base-title-size);
        font-weight: bold;
        margin-bottom: var(--base-gap);
        margin-left: 0;
      }
      
      .description {
        font-size: var(--base-text-size);
        line-height: 1.6;
        margin-left: 0;
        height: calc(100% - 6rem);
        overflow-y: auto;
        padding-right: 1rem;
      }
      
      .description p {
        margin: 0 0 3rem 0;
      }
      
      .description p:last-child {
        margin-bottom: 2rem;
      }
      
      .images {
        display: grid;
        grid-template-rows: 2fr 1fr;
        gap: calc(var(--base-gap) * 0.5);
        height: calc(100vh - (var(--base-padding) * 2));
        position: sticky;
        top: var(--base-padding);
      }
      
      .main-image {
        width: 100%;
        height: auto;
        aspect-ratio: 16/9;
        object-fit: cover;
        transition: transform 0.3s ease;
      }
      
      .main-image:hover {
        transform: scale(1.02);
      }
      
      .small-images {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: calc(var(--base-gap) * 0.5);
      }
      
      .small-image {
        width: 100%;
        aspect-ratio: 16/9;
        object-fit: cover;
        transition: transform 0.3s ease;
      }
      
      .small-image:hover {
        transform: scale(1.02);
      }
      
      img {
        border-radius: 4px;
        background-color: #f5f5f5;
      }

      /* Customize scrollbar */
      .description::-webkit-scrollbar {
        width: 6px;
      }
      
      .description::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
      }
      
      .description::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 3px;
      }
      
      .description::-webkit-scrollbar-thumb:hover {
        background: #555;
      }

      /* Scaling for screens larger than reference width */
      @media screen and (min-width: 1551px) {
        :root {
          /* Calculate proportional scaling */
          --scale-factor: calc(100vw / var(--max-reference-width));
          
          /* Apply scaling to base sizes with controlled growth */
          --base-padding: calc(2rem * min(1.2, var(--scale-factor)));
          --base-gap: calc(2rem * min(1.2, var(--scale-factor)));
          
          /* Increase font sizes by 20-35% */
          --base-title-size: calc(2.5rem * min(1.35, var(--scale-factor) * 1.2));
          --base-text-size: calc(1.1rem * min(1.35, var(--scale-factor) * 1.2));
          --base-back-size: calc(1rem * min(1.35, var(--scale-factor) * 1.2));
          
          /* Scale content width proportionally */
          --base-content-width: calc(500px * min(1.5, var(--scale-factor) * 1.2));
          --base-container-width: calc(1400px * min(1.5, var(--scale-factor) * 1.2));
        }
        
        /* For screens wider than reference, apply container scaling */
        .wrapper {
          max-width: none;
          width: 100%;
        }
        
        /* Adjust image grid spacing */
        .images {
          gap: calc((var(--base-gap) * 0.5) * var(--scale-factor));
        }
        
        .small-images {
          gap: calc((var(--base-gap) * 0.5) * var(--scale-factor));
        }
      }
      
      /* Mobile styles for iPhone devices up to iPhone 16 Pro Max */
      @media screen and (max-width: 440px) {
        :root {
          /* Calculate proportional scaling for mobile */
          --mobile-scale-factor: calc(100vw / var(--mobile-reference-width));
          
          /* Apply mobile scaling to base sizes */
          --base-padding: var(--mobile-padding);
          --base-gap: var(--mobile-gap);
          --base-title-size: var(--mobile-title-size);
          --base-text-size: var(--mobile-text-size);
          --base-back-size: var(--mobile-back-size);
        }
        
        body {
          overflow-y: auto; /* Enable native scrolling */
          height: auto;
        }
        
        .wrapper {
          height: auto;
          min-height: 100vh;
          position: relative; /* Create stacking context */
        }
        
        .container {
          display: flex;
          flex-direction: column;
          grid-template-columns: unset;
          padding: var(--base-padding);
          padding-top: calc(var(--base-padding) * 4); /* Increase padding for more space below title */
          height: auto;
          min-height: 100vh;
        }
        
        .back-button {
          position: absolute;
          top: var(--base-padding);
          left: var(--base-padding);
          z-index: 20; /* Ensure back button is above title */
        }
        
        /* Title at the top, centered and aligned with back button */
        .title {
          position: absolute;
          top: var(--base-padding);
          left: 0;
          right: 0;
          text-align: center;
          margin: 0 auto;
          padding: 0;
          font-size: var(--base-title-size);
          width: 70%;
          z-index: 10; /* Ensure title is above other elements */
        }
        
        .content {
          order: 2; /* Move content after images */
          padding-top: 0;
          max-width: 100%;
          height: auto;
          margin-top: 1rem;
          position: relative; /* Ensure proper stacking context */
        }
        
        .description {
          height: auto;
          max-height: none;
          overflow-y: visible;
          padding-right: 0;
          margin-bottom: 1.5rem;
        }
        
        .images {
          order: 1; /* Show images first */
          display: flex;
          flex-direction: column;
          grid-template-rows: unset;
          gap: 1rem;
          height: auto;
          margin-top: 1rem; /* Add some top margin for extra spacing */
          position: relative; /* Not sticky */
          top: auto;
          padding-top: 0.5rem; /* Additional padding at the top */
        }
        
        .main-image {
          width: 100%;
          height: auto;
          margin-bottom: 0.5rem;
        }
        
        .small-images {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 0.5rem;
        }
        
        .small-image {
          width: 100%;
          height: auto;
        }
      }
    </style>
    <script>
      // Add scroll event listener to handle scrolling anywhere on the page
      document.addEventListener('DOMContentLoaded', () => {
        const description = document.querySelector('.description');
        
        // Function to toggle scroll behavior based on window width
        function toggleScrollBehavior() {
          const currentWidth = window.innerWidth;
          
          // Remove any existing wheel event listeners
          document.body.removeEventListener('wheel', handleWheel);
          
          // Only apply custom scroll for desktop
          if (currentWidth > 440) {
            // Add wheel event listener for desktop
            document.body.addEventListener('wheel', handleWheel, { passive: false });
          }
        }
        
        // Wheel event handler function
        function handleWheel(e: WheelEvent) {
          e.preventDefault(); // Prevent default scroll
          
          // Scroll the description div
          if (description) {
            description.scrollTop += e.deltaY;
          }
        }
        
        // Initial toggle
        toggleScrollBehavior();
        
        // Add resize listener to toggle scroll behavior and apply custom scaling
        window.addEventListener('resize', () => {
          toggleScrollBehavior();
          adjustForScreenSize();
        });
        
        // Also adjust on orientation change
        window.addEventListener('orientationchange', () => {
          setTimeout(() => {
            toggleScrollBehavior();
            adjustForScreenSize();
          }, 100);
        });
        
        // Run once on load
        adjustForScreenSize();
      });
      
      function adjustForScreenSize() {
        const referenceWidth = 1550;
        const mobileReferenceWidth = 375;
        const mobileMaxWidth = 440;
        const currentWidth = window.innerWidth;
        
        // Mobile scaling (iPhone devices up to iPhone 16 Pro Max)
        if (currentWidth <= mobileMaxWidth) {
          // Calculate mobile scaling factor based on reference width
          const mobileScaleFactor = Math.min(1.2, currentWidth / mobileReferenceWidth);
          
          // Apply mobile scaling factor to document root
          document.documentElement.style.setProperty('--mobile-scale-factor', mobileScaleFactor.toString());
          
          // Scale font sizes proportionally for mobile
          const titleSize = Math.min(2 * mobileScaleFactor, 2.5);
          const textSize = Math.min(1 * mobileScaleFactor, 1.2);
          const backSize = Math.min(0.9 * mobileScaleFactor, 1.1);
          
          document.documentElement.style.setProperty('--mobile-title-size', `${titleSize}rem`);
          document.documentElement.style.setProperty('--mobile-text-size', `${textSize}rem`);
          document.documentElement.style.setProperty('--mobile-back-size', `${backSize}rem`);
          
          // Restructure DOM for mobile layout
          restructureForMobile();
          
          // Additional adjustments for larger iPhones
          if (currentWidth > 390) {
            const container = document.querySelector('.container') as HTMLElement;
            const images = document.querySelector('.images') as HTMLElement;
            
            if (container && images) {
              // Increase spacing for larger screens
              container.style.paddingTop = `calc(var(--base-padding) * 4.5)`;
              images.style.marginTop = '1.5rem';
            }
          }
          
          console.log(`Mobile: Screen width: ${currentWidth}px, Scale factor: ${mobileScaleFactor}, Title size: ${titleSize}rem`);
        }
        // Desktop scaling for screens larger than reference
        else if (currentWidth > referenceWidth) {
          // Calculate scaling factor (capped to prevent excessive scaling)
          const scaleFactor = Math.min(1.5, currentWidth / referenceWidth);
          
          // Apply scaling factor to document root for CSS variable access
          document.documentElement.style.setProperty('--scale-factor', scaleFactor.toString());
          
          // Calculate and set the content width based on the viewport
          const contentWidth = Math.min(500 * scaleFactor * 1.2, currentWidth * 0.3);
          document.documentElement.style.setProperty('--base-content-width', `${contentWidth}px`);
          
          // Calculate and set the container width based on the viewport
          const containerWidth = Math.min(1400 * scaleFactor * 1.2, currentWidth * 0.9);
          document.documentElement.style.setProperty('--base-container-width', `${containerWidth}px`);
          
          // Reset DOM structure for desktop if needed
          resetToDesktop();
          
          console.log(`Desktop: Screen width: ${currentWidth}px, Scale factor: ${scaleFactor}, Content width: ${contentWidth}px`);
        } else {
          // Reset to default values for standard desktop screens
          document.documentElement.style.setProperty('--scale-factor', '1');
          document.documentElement.style.setProperty('--base-content-width', '500px');
          document.documentElement.style.setProperty('--base-container-width', '1400px');
          
          // Reset DOM structure for desktop if needed
          resetToDesktop();
          
          console.log(`Standard: Screen width: ${currentWidth}px, Scale factor: 1 (default)`);
        }
      }
      
      // Function to restructure DOM for mobile layout
      function restructureForMobile() {
        // Only restructure if not already done
        if (document.querySelector('.mobile-restructured')) {
          return;
        }
        
        const wrapper = document.querySelector('.wrapper');
        const container = document.querySelector('.container');
        const content = document.querySelector('.content');
        const title = document.querySelector('.title');
        
        if (wrapper && container && content && title) {
          // Mark as restructured
          wrapper.classList.add('mobile-restructured');
          
          // Move title to the top of the wrapper (outside container)
          if (title.parentElement === content) {
            // Insert after back button if it exists, otherwise at the beginning
            if (wrapper.firstChild) {
              wrapper.insertBefore(title, wrapper.firstChild.nextSibling || wrapper.firstChild);
            } else {
              wrapper.appendChild(title);
            }
          }
        }
      }
      
      // Function to reset DOM structure for desktop
      function resetToDesktop() {
        const wrapper = document.querySelector('.wrapper');
        const container = document.querySelector('.container');
        const content = document.querySelector('.content');
        const title = document.querySelector('.title');
        
        if (wrapper && container && content && title) {
          // Remove restructured marker
          wrapper.classList.remove('mobile-restructured');
          
          // Move title back to content if it's directly under wrapper
          if (title.parentElement === wrapper) {
            content.insertBefore(title, content.firstChild);
          }
        }
      }
    </script>
  </head>
  <body>
    <div class="wrapper">
      <a href="/" class="back-button">back</a>
      <div class="container">
        <div class="content">
          <h1 class="title">{title}</h1>
          <div class="description">
            <slot />
          </div>
        </div>
        <div class="images">
          <img id="main-image" class="main-image" alt="Main project image" />
          <div class="small-images">
            <img id="small-image-1" class="small-image" alt="Additional project image 1" />
            <img id="small-image-2" class="small-image" alt="Additional project image 2" />
          </div>
        </div>
      </div>
    </div>
    <Lightbox />
  </body>
</html> 